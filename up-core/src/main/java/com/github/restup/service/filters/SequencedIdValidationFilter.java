package com.github.restup.service.filters;

import com.github.restup.annotations.filter.PreCreateFilter;
import com.github.restup.errors.ErrorBuilder;
import com.github.restup.errors.ErrorBuilder.ErrorCode;
import com.github.restup.errors.Errors;
import com.github.restup.mapping.fields.MappedField;
import com.github.restup.registry.Resource;
import com.github.restup.service.ServiceFilter;
import com.github.restup.service.model.request.CreateRequest;
import java.io.Serializable;

public class SequencedIdValidationFilter implements ServiceFilter {

    /**
     * Only applied when identity field does not permit auto generated values
     */
    @Override
    public <T, ID extends Serializable> boolean accepts(Resource<T, ID> resource) {
        return !resource.getIdentityField().isIdentifierNonAutoGeneratedValuePermitted();
    }

    /**
     * If an id has a non null value, add an error to errors
     */
    @PreCreateFilter
    public <T, ID extends Serializable> void validateIdNotPresent(Errors errors, Resource<T, ID> resource, CreateRequest<T> request) {
        MappedField<ID> idField = resource.getIdentityField();
        ID id = (ID) idField.readValue(request.getData());
        if (id != null) {
            errors.addError(ErrorBuilder.builder(resource)
                    .code(ErrorCode.ID_NOT_ALLOWED_ON_CREATE)
                    .status(ErrorBuilder.ErrorCodeStatus.FORBIDDEN)
                    .meta(idField.getApiName(), id));
        }
    }

}

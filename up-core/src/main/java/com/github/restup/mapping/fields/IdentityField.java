package com.github.restup.mapping.fields;

import com.github.restup.annotations.field.CaseInsensitive;
import com.github.restup.annotations.field.Immutable;
import com.github.restup.annotations.field.Param;
import com.github.restup.annotations.field.Relationship;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.List;

/**
 * a {@link MappedField} which is an identifier for a {@link com.github.restup.mapping.MappedClass}
 *
 * @param <ID>
 */
public class IdentityField<ID extends Serializable> extends MappedField<ID> {

    private final boolean nonAutoGeneratedValuePermitted;

    protected IdentityField(Class<ID> type, String beanName, String apiName, String persistedName, boolean ignoreUpdateAttempt, boolean apiProperty, boolean transientField, CaseInsensitive caseInsensitive, Relationship relationship, Immutable immutable, Param param, Field field, boolean nonAutoGeneratedValuePermitted) {
        super(type, beanName, apiName, persistedName, ignoreUpdateAttempt, apiProperty, transientField, caseInsensitive, relationship, immutable, param, field);
        this.nonAutoGeneratedValuePermitted = nonAutoGeneratedValuePermitted;
    }

    @SuppressWarnings("rawtypes")
    public static IdentityField<?> getIdentityField(List<MappedField<?>> attributes) {
        for (MappedField<?> field : attributes) {
            if (field instanceof IdentityField) {
                return (IdentityField) field;
            }
        }
        return null;
    }

    public boolean isNonAutoGeneratedValuePermitted() {
        return nonAutoGeneratedValuePermitted;
    }

}
